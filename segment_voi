#author @t_sanf

import numpy as np
import pandas as pd
import pydicom
import os

from pathlib import Path
from parsing_VOI import ParseVOI
import xml.etree.ElementTree as Et
from xml.etree.ElementTree import Element, ElementTree
import datetime


class VOI_to_image_surgery(ParseVOI):
    '''
    class that finds all the files in the basePATH directory that are voi files, then segments them all with
    padding and saves them to a new directory.  This class was designed for the surgical patient directories in MIP
    '''

    def __init__(self,basePATH):
        self.PATH=basePATH
        self.OUTDIR=r''  #directory to save the files to

    def save_segemented_dicom(self,label_type='tumor'):
        '''
        :param type:
        :return:
        '''

        dicom_voi_dict=self.find_dicom_voi_dir()
        for key in dicom_voi_dict.keys():
            patient=key
            voi_dir=dicom_voi_dict[key][0]
            image_dir=dicom_voi_dict[key][1]
            ordered_dicoms=self.order_dicom(image_dir)
            bb_dict_list=self.list_of_dicts(voi_dir)

            #change dict keys from slice number to image label
            list_of_dict=[]
            for spec_dict in bb_dict_list:
                for key in spec_dict.keys():
                    dicom_name = ordered_dicoms[int(key)]
                    spec_dict=self.rename_dict_keys(spec_dict, key, dicom_name)  #helper function defined below
                list_of_dict+=[spec_dict]

            #
            for renamed_dict in list_of_dict:
                index=1
                for key in renamed_dict.keys():
                    vals=renamed_dict[key]
                    if vals[0] == label_type:
                        print(vals)
                        path_to_image = os.path.join(image_dir, key)
                        ds=pydicom.dcmread(path_to_image)
                        data=ds.pixel_array
                        print('The image has {} x {} voxels'.format(data.shape[0],
                                                                    data.shape[1]))
                        data_downsampling=data[vals[2]-5:vals[4]+5,vals[1]-5:vals[3]+5]
                        print('The downsampled image has {} x {} voxels'.format(
                            data_downsampling.shape[0], data_downsampling.shape[1]))

                        ds.PixelData = data_downsampling.tobytes()
                        ds.Rows, ds.Columns = data_downsampling.shape

                        label=str(patient)+'_'+"T2"+'_'+str(label_type)+'_'+str(key)+'_'+str(index)
                        index+=1

                        print(os.path.join(self.OUTDIR,patient))
                        if not os.path.exists(os.path.join(self.OUTDIR,patient)):
                            os.mkdir(os.path.join(self.OUTDIR,patient))
                        os.chdir(os.path.join(self.OUTDIR,patient))
                        ds.save_as(label+'.dcm')
                        os.chdir(self.OUTDIR)


    def rename_dict_keys(self,old_dict, old_name, new_name):
        '''helper function to rename keys in a dict'''

        new_dict = {}
        for key, value in zip(old_dict.keys(), old_dict.values()):
            new_key = key if key != old_name else new_name
            new_dict[new_key] = old_dict[key]
        return new_dict


    def find_dicom_voi_dir(self):     # note, duplicate code from ApplyAll Files --> trying to avoid multiple inheritance
        '''
        NOTE - base directory MUST be correct in order for this to work (see param basePATH in __init__)
        looks for all files that contain .voi files and saves folder.
        Then goes up a directory and finds the dicom folder.
        Then goes up a directory and gets unqiue patient ID
        Saves all three in dictionary as shown below
        return (dict):{unique patient ID:(voi_directory_path,dicom_directory_path)
        '''

        #find location of VOI files and select unique values
        dicom_dirs=[]
        voi_dirs=[]
        for root, dirs, files in os.walk(self.PATH):
            for file in files:
                if file.endswith(".voi"):
                    voi_dirs+=[root]

        voi_dirs_unique=list(set(voi_dirs))

        #find directory of VOI files, dicom files and unique patient ID and save all to dict
        ## note --> this is the worst, most inefficient way I could think of to do this.
        ### if anyone can think of a more inefficient way to do this, please contribute.  Otherwise stop judging.

        path_dict={}
        for dir in voi_dirs_unique:
            voi_path = dir
            dir_path = os.path.dirname(dir)
            patient_ID=Path(dir_path).parts[-1]
            file_type_dir=os.listdir(dir_path)
            if 'dicom' in file_type_dir:
                dicom_path=os.path.join(dir_path,file_type_dir[0])
                image_path=None
                while image_path == None:
                    for root, dirs, files in os.walk(dicom_path):
                        for file in files:
                            if file != 'VERSION' and file !='DICOMDIR' and file != 'LOCKFILE':
                                paths=root
                                pathlib=Path(paths)
                                split=pathlib.parts
                                if 'axial' in split:
                                    joined_path=os.path.join(r'\\',*split)
                                    image_path=joined_path
                path_dict[patient_ID]=(voi_path,image_path)
        return(path_dict)



    def order_dicom(self,image_directory):  # more duplicate code from ApplyAllFiles --> again, no multiple inheritance
        '''
        this method loads all the dicom images in a directory and sorts them by name
        param directory(str): dicom output of find_dicom_voi_dir, should be in axial file
        :return: list of images in correct order
        '''

        dicoms={}
        for root,dirs,files in os.walk(image_directory):
            for file in files:
                if file != 'VERSION' and file != 'DICOMDIR' and file != 'LOCKFILE' and file!=None and not file.endswith('.xml'):
                    path=os.path.join(root,file)
                    ds=pydicom.read_file(path)
                    self.SHAPE=ds.pixel_array.shape
                    dicoms[str(file)] = float(ds.SliceLocation)
        updated_imagelist=[key for (key, value) in sorted(dicoms.items(), key=lambda x: x[1])]
        return(updated_imagelist)

########################################################################
########################################################################

class VOI_to_image_all_MRIs(ParseVOI):
    '''
    This class is specific to Robert Huang file structure --> will break in surgical folder patients
    Filter
    '''

    def __init__(self,basePATH):
        self.PATH=basePATH
        self.OUTDIR= r''       #directory to save the files to
        self.start_date=datetime.date(2018,5,1)
        self.end_date = datetime.date(2018,7,1)

    def segment_voi(self,mode='PIRADS'):
        '''
        This file reads in all the dicom images within a specific date range in Robert Huwang and segments them
        :return:
        '''

        PATH=self.PATH
        for month in os.listdir(PATH):

            #check if the file is within date range, and is between correct month and year
            if len(str(month).split('_'))>2:
                month_split=month.split('_')
                YEAR=int(month_split[0])
                MONTH=int(month_split[1])
                DAY=int(month_split[2])
                scan_date = datetime.date(YEAR, MONTH, DAY)
                if self.start_date < scan_date < self.end_date:
                    month_path=os.path.join(PATH,month)
                    dicom_voi_dict = self.find_paths_dicom_voi(month_path) # note - result of this function is patientID:([dicom_file_paths],[voi_file_paths])

                    print(dicom_voi_dict)

                    total_tumors = 0
                    #loop over patients
                    for key in dicom_voi_dict.keys():

                        #get bounding boxes based on slice location and dicom file information
                        patient_id = key
                        print(patient_id)

                        try:
                            voi_dir = os.path.dirname(dicom_voi_dict[patient_id][1][0])  # directory to voi files

                        except:
                            print("something wrong with this file!")
                            pass

                        #produces list of dictionaries, one for each VOI file, with format slice:(name,bb_coord x 4)
                        bb_dict_list = self.list_of_dicts(voi_dir)   # function  inherited from ParseVOI to get bb location for slices

                        dicom_path_dict=dicom_voi_dict[patient_id][0] # select first filepath
                        dicom_dir=os.path.dirname(dicom_path_dict[0][0]) #select dicom directory for later in the program
                        dicom_file_names=os.listdir(dicom_dir)

                        #select PIRADS
                        list_of_dict_PIRADS=[]
                        for dict in bb_dict_list: #select dict of bbox (one for each voi file) from list of dicts
                            if not len(dict)==0:
                                full_name=list(dict.values())[0][0]
                                name=str(full_name).replace(' ','_').split('_')

                            if "PIRADS" in name:
                                PIRADS_dict=dict
                                PIRADS_score='PIRADS_'+str(name[(name.index('PIRADS')+1)])
                                print(PIRADS_score)

                                #crop the appropriate image
                                image_num=0

                                for key in PIRADS_dict.keys():
                                    print(key)
                                    print(PIRADS_dict[str(key)])
                                    image_num+=1
                                    vals=PIRADS_dict[str(key)]

                                    try:
                                        path_to_image=dicom_path_dict[int(key)][0] #index into the correct image
                                        print(path_to_image)

                                    except:
                                        print("something wrong with this file!")
                                        pass

                                    try:
                                        ds = pydicom.dcmread(path_to_image)
                                        data = ds.pixel_array
                                        print('The image has {} x {} voxels'.format(data.shape[0],
                                                                                    data.shape[1]))
                                        data_downsampled = data[vals[2] - 15:vals[4] + 15, vals[1] - 15:vals[3] + 15]
                                        print('The downsampled image has {} x {} voxels'.format(
                                            data_downsampled.shape[0], data_downsampled.shape[1]))
                                        ds.PixelData = data_downsampled.tobytes()
                                        ds.Rows, ds.Columns = data_downsampled.shape
                                    except:
                                        print("cannot load image")
                                        pass

                                    # save image
                                    if not os.path.exists(os.path.join(self.OUTDIR, patient_id)):
                                        os.mkdir(os.path.join(self.OUTDIR, patient_id))
                                    os.chdir(os.path.join(self.OUTDIR, patient_id))
                                    ds.save_as(str(PIRADS_score)+'_'+str(image_num)+ '.dcm')
                                    os.chdir(self.OUTDIR)

    def find_paths_dicom_voi(self,month_path):
        '''
        Finds all the dicom directories in a path, then finds all the voi files and saves those paths betwee
        dates specified in the __init__ method
        Returns a dict of ID:tuple of lists --> Patient_ID:([Dicom_list_ordered],[VOI_list])
        '''

        self.PATH=month_path
        out_dict={}

        for patient in os.listdir(month_path):
            print(patient)
            if len(patient.split('_'))==5:
                    patient_dir=os.path.join(month_path,patient)
                    dicom_paths=self.find_all_dicom_paths(patient_dir)
                    dicom_paths_ordered=self.order_dicom(dicom_paths)
                    dicom_dict={}
                    i=0
                    for path in dicom_paths_ordered:
                        dicom_dict[i]=[path]
                        i=i+1
                    voi_paths=self.find_voi_paths(patient_dir)
                    out_dict[str(patient)]=(dicom_dict,voi_paths)
        return(out_dict)

    def find_all_dicom_paths(self,patient_dir):
        '''
        start in patient dated directory, then find all dicom files listed in that directory
        :return: list of paths to dicom files within patient directory
        '''
        all_dicoms=[]
        for root,dirs,files in os.walk(patient_dir):
            for file in files:
                if file != 'DICOMDIR': #because for some reason the dicom reader opens these files
                    file_path=os.path.join(root,file)
                    try:
                        pydicom.dcmread(file_path)
                        all_dicoms+=[file_path]
                    except:
                        pass
        return all_dicoms

    def find_voi_paths(self,patient_dir):
        '''
        function to find all .voi files within a specific patient directory.  Meant to be used within a for loop
        searching over all the files
        :return:
        '''
        voi_dirs=[]
        for root,dirs,files in os.walk(patient_dir):
            for file in files:
                if file.endswith(".voi"):
                    voi_path=os.path.join(root,file)
                    voi_dirs += [voi_path]
            voi_dirs_unique = list(set(voi_dirs))
        return(voi_dirs_unique)

    def order_dicom(self,dicom_file_list):
        '''
        As input, this method takes a list of paths to dicom directories (from find_dicom_paths), loads dicom, then orders them
        '''

        dicoms={}
        for path in dicom_file_list:
            file=path
            ds=pydicom.read_file(path)
            self.SHAPE=ds.pixel_array.shape
            dicoms[str(file)] = float(ds.SliceLocation)
        updated_imagelist=[key for (key, value) in sorted(dicoms.items(), key=lambda x: x[1])]
        return(updated_imagelist)




if __name__=='__main__':
    c=VOI_to_image_all_MRIs(r'')
    print(c.segment_voi())
